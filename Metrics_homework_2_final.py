# -*- coding: utf-8 -*-
"""
Created on Sat Oct 26 16:17:45 2024

@author: lmackin_lbs
"""


#Question 2D
import numpy as np
import math
from scipy import stats
import os
import pandas as pd

x = np.random.normal(loc = 0, scale = math.sqrt(2), size = 100000)

p = np.percentile(x, 95) 

print(p)

#Generate what the distribution should have been under non-Gaussianity
y = np.random.normal(loc = 0, scale = 2, size = 100000)

percentile = stats.percentileofscore(y, p)
print(percentile)

true_size = (100 - percentile) / 100

print(true_size)

#Question 2E
#Quick path check to figure out where I'm working
path = os.getcwd()
#print(path)

wage_data = pd.read_excel("wage.xlsx")

wage_data["lwage"] = np.log(wage_data["wage"])

wage_data = wage_data.drop(['wage'], axis = 1)

female_df = wage_data.query("male == 0")
male_df = wage_data.query("male == 1")

n1 = male_df.shape[0]
n2 = female_df.shape[0]
s1_squared = sum((male_df["lwage"] - male_df["lwage"].mean())**2) / (n1 - 1)
s2_squared = sum((female_df["lwage"] - female_df["lwage"].mean())**2) / (n2 - 1)

#Calculate T value
#Note: We may need to make female s1_squared. Let's see our results and then find out.
#T = np.sqrt((n1*n2)/(n1+n2))*(np.log(s1_squared) - np.log(s2_squared))
T = np.sqrt((n1*n2)/(n1+n2))*(np.log(s2_squared) - np.log(s1_squared))

#Now, calculate components needed for k_hat
male_fourth_component = sum((male_df["lwage"] - male_df["lwage"].mean())**4)
female_fourth_component = sum((female_df["lwage"] - female_df["lwage"].mean())**4)
k_numerator = (n1+n2)*(male_fourth_component + female_fourth_component)

male_second_comp = sum((male_df["lwage"] - male_df["lwage"].mean())**2)
female_second_comp = sum((female_df["lwage"] - female_df["lwage"].mean())**2)

k_denom = (male_second_comp + female_second_comp)**2

k_hat = k_numerator / k_denom

#Now calculate our first test statistic
test_stat = T / np.sqrt(k_hat - 1)

#We compare this to the critical value using alpha = 0.05 for a one-sided test.
#This value is 1.64

#Since the absolute value of our test statistic is less than the critical value
#we fail to reject the null hypothesis

#Conventional F-Test
f_test_stat = s2_squared / s1_squared

#We compare this to a value generated by an online F critical value calculator.





